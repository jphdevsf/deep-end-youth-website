////
/// @group Utils
////

/// Mixin to build appended rules
/// @param {map} $appendRules - Map of additional css rules (as key value pairs) to append to css declaration block for current utility class buildDeclarations() is iterating over.
/// @param {string} $value - Optional css property value that buildClasses() is currently iterating over.
@mixin appendDeclarations ($appendRules, $value: '') {
  @each $prop, $val in $appendRules {
    // for nested map configs such as $font-config in config.scss
    @if type-of($val) == 'map' {
      @if ($prop == $value) {
        @each $p, $v in $val {
          #{$p}: $v;
        }
      }
    }
    // basic rule appending for most cases
    @else {
      #{$prop}: $val;
    }
  }
}

/// Mixin that returns a css declaration block for current utility class buildClasses() is iterating over.
/// @param {string} $value - css property value that buildClasses() is currently iterating over. 
/// @param {string} $config.property - css property.
/// @param {map} $config.appendRules - optional map of additional css rules (as key value pairs) to apply across all utility classes.
/// @param {boolean} $config.important - False by default. When set to true, !important is appended to $value (Only use this to resolve conflicts with external utility frameworks).
@mixin buildDeclarations($value, $config) {
  // destructure and variable setup
  $property: map-get-if-exists($config, 'property');
  $important: map-get-if-exists($config, important, false);
  // build
  $value: determineUnit($value, $config);
  $appendRules: map-get-if-exists($config, appendRules);
  $nestedAppendRules: null;
  // if we found a map instead of a css value, assume the map is a nested set of rules to append
  @if type-of($value) == 'map' { 
    $nestedAppendRules: map-get-if-exists($value, appendRules);
    // 
    $value: map-get($value, nth(map-keys($value), 1)); 
  }
  @if $important == true {
    $value: $value + ' !important'
  }
  @if ($property) { #{$property}: $value; }
  @if $appendRules { @include appendDeclarations ($appendRules, $value) }
  @if $nestedAppendRules { @include appendDeclarations ($nestedAppendRules, $value) }
}


/// Main mixin that generates basic breakpoint utility classes for a configured property and list of property values.
/// @param {map} $config - required map configuration (like an object in js).
/// @param {string} $config.property - css property for utility classes to target. Also acts as default value for $name.
/// @param {string} $config.[name] - optional string for utility class name (will be prefixed by breakpoint name and suffixed by $propValues list item). Defaults to $property.
/// @param {list|map} $config.propValues - sass list or map of all css property values, also used as suffix in utility class name. If a map is passed, keys will be incorporated in the css selector, with values serving as css value. Lists of logically incremented number values can be generated using the buildNumSequence() here as well (see example 2 below).
/// @param {string} $config.[specificity='low'] - Accepts value of 'low' (default), 'medium', or 'high'. Adds additional selectors to utility class generation to boost specificity (in cases where you have conflict between utility classes and you want a set of classes to override another)
/// @param {string} $config.[unit=false] - optional unit (px, em, %, etc.) to append to property values.
/// @param {map} $config.[appendRules] - optional map of additional css rules (as key value pairs) to apply across all utility classes generated by this mixin.
/// @param {map} $config.[rename] - optional map serving as a lookup table allowing you to deviate from programmaticly created class name (key) to string of you choice (value).
/// @param {bool} $config.[valIsSel=false] - flag that if set to true, uses value stored in $propValues as utility class name.
/// @example
///   $_config: (
///     property: 'display',
///     name: 'd',
///     propValues: block inline-block inline none flex inherit,
///     specificity: 'medium',
///     appendRules: (
///       visibility: visible,
///       opacity: 1
///     ),
///     rename: (
///       none: 'hide-it'
///     )
///   );
///   @include buildClasses($config)
///
/// @example
///   $_config: (
///     property: 'top',
///     name: 't',
///     propValues: buildNumSequence($min:0, $max:10, $inc:1),
///     unit: '%',
///     rename: (
///       t0: 'top'
///     )
///   );
///   @include buildClasses($config)
///
@mixin buildClasses($config) {
  // destructure and variable setup
  $property: map-get-if-exists($config, 'property', 'property');
  $propValues: map-get-if-exists($config, propValues);
  $specificity: map-get-if-exists($config, specificity, 'low');
  $index: 0;
  @if ($propValues == null) { @debug '\A\A ERROR: propValues missing or defined incorrectly in config for buildClasses(), config was: \A #{$config} \A\A'; }
  @else if (type-of($propValues) == 'list') {
    #{determineParentSelector($specificity)} {
      @each $bpSelector, $bp in $breakpoints {
        @if $index==0 {
          @each $value in $propValues {
            $selector: buildSelector($value, $config);
            .#{$selector} {
              @include buildDeclarations($value, $config);
            }
          }
        }
        @else {
          @media only screen and (min-width: $bp) {
            @each $value in $propValues {
              $selector: buildSelector($value, $config);
              .#{$bpSelector}-#{$selector} {
                @include buildDeclarations($value, $config);
              }
            }
          }
        }
        $index: $index + 1;
      }
    }
    /* ---- END #{$property} utility classes ---- */
  }

  @else if (type-of($propValues) == 'map') {
    /* ---- #{$property} utility classes ---- */
    #{$parentSelector} {
      @each $bpSelector, $bp in $breakpoints {
        @if $index==0 {
          @each $key, $value in $propValues {
            $selector: buildSelector($value, $config, $key);
            .#{$selector} {
              @include buildDeclarations($value, $config);
            }
          }
        }
        @else {
          @media only screen and (min-width: $bp) {
            @each $key, $value in $propValues {
              $selector: buildSelector($value, $config, $key);
              .#{$bpSelector}-#{$selector} {
                @include buildDeclarations($value, $config);
              }
            }
          }
        }
        $index: $index + 1;
      }
    }
    /* ---- END #{$property} utility classes ---- */
  }
}
